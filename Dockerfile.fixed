# Use the official Node.js 20 Alpine image as base
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files
COPY package.json pnpm-lock.yaml* pnpm-workspace.yaml* ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Copy build environment file if it exists, otherwise create a minimal one
RUN if [ -f ".env.build" ]; then \
      cp .env.build .env.local; \
    else \
      echo "NODE_ENV=production" > .env.local; \
    fi

# Generate Prisma client
RUN pnpm dlx prisma generate

# Build Next.js application
ENV NEXT_TELEMETRY_DISABLED 1
RUN pnpm build

# Remove build env file
RUN rm -f .env.local

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy public folder
COPY --from=builder /app/public ./public

# Create necessary directories
RUN mkdir -p ./public/uploads ./logs .next
RUN chown -R nextjs:nodejs ./public/uploads ./logs .next

# Copy the standalone output
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy Prisma files - copy the entire prisma directory to ensure everything is included
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma

# Copy the entire generated Prisma client directory to ensure everything works
COPY --from=builder --chown=nextjs:nodejs /app/prisma/generated ./prisma/generated

# Create a simple script to handle Prisma client setup at runtime
RUN echo '#!/bin/sh\nif [ ! -d "./node_modules/.prisma/client" ]; then\n  mkdir -p ./node_modules/.prisma/client\n  cp -r ./prisma/generated/prisma/* ./node_modules/.prisma/client/ 2>/dev/null || true\nfi\nexec "$@"' > /app/docker-entrypoint.sh
RUN chmod +x /app/docker-entrypoint.sh
RUN chown nextjs:nodejs /app/docker-entrypoint.sh

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["node", "server.js"]